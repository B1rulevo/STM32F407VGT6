
PHASEMETER_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002094  08002094  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002094  08002094  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002094  08002094  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002094  08002094  00012094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800209c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000034  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005a84  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001007  00000000  00000000  00025ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000668  00000000  00000000  00026ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e0  00000000  00000000  00027128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba7e  00000000  00000000  00027708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004541  00000000  00000000  00043186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a494d  00000000  00000000  000476c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000ec014  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a3c  00000000  00000000  000ec068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002038 	.word	0x08002038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002038 	.word	0x08002038

080001c8 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	431a      	orrs	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80001ee:	b480      	push	{r7}
 80001f0:	b083      	sub	sp, #12
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	689b      	ldr	r3, [r3, #8]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b01      	cmp	r3, #1
 8000200:	bf0c      	ite	eq
 8000202:	2301      	moveq	r3, #1
 8000204:	2300      	movne	r3, #0
 8000206:	b2db      	uxtb	r3, r3
}
 8000208:	4618      	mov	r0, r3
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800021e:	2300      	movs	r3, #0
 8000220:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8000222:	481c      	ldr	r0, [pc, #112]	; (8000294 <LL_ADC_CommonInit+0x80>)
 8000224:	f7ff ffe3 	bl	80001ee <LL_ADC_IsEnabled>
 8000228:	4604      	mov	r4, r0
 800022a:	481b      	ldr	r0, [pc, #108]	; (8000298 <LL_ADC_CommonInit+0x84>)
 800022c:	f7ff ffdf 	bl	80001ee <LL_ADC_IsEnabled>
 8000230:	4603      	mov	r3, r0
 8000232:	431c      	orrs	r4, r3
 8000234:	4819      	ldr	r0, [pc, #100]	; (800029c <LL_ADC_CommonInit+0x88>)
 8000236:	f7ff ffda 	bl	80001ee <LL_ADC_IsEnabled>
 800023a:	4603      	mov	r3, r0
 800023c:	4323      	orrs	r3, r4
 800023e:	2b00      	cmp	r3, #0
 8000240:	d120      	bne.n	8000284 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d012      	beq.n	8000270 <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	685a      	ldr	r2, [r3, #4]
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <LL_ADC_CommonInit+0x8c>)
 8000250:	4013      	ands	r3, r2
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	6811      	ldr	r1, [r2, #0]
 8000256:	683a      	ldr	r2, [r7, #0]
 8000258:	6852      	ldr	r2, [r2, #4]
 800025a:	4311      	orrs	r1, r2
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	6892      	ldr	r2, [r2, #8]
 8000260:	4311      	orrs	r1, r2
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	68d2      	ldr	r2, [r2, #12]
 8000266:	430a      	orrs	r2, r1
 8000268:	431a      	orrs	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	e00b      	b.n	8000288 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	685a      	ldr	r2, [r3, #4]
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <LL_ADC_CommonInit+0x8c>)
 8000276:	4013      	ands	r3, r2
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	6812      	ldr	r2, [r2, #0]
 800027c:	431a      	orrs	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	e001      	b.n	8000288 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8000284:	2301      	movs	r3, #1
 8000286:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8000288:	7bfb      	ldrb	r3, [r7, #15]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	bd90      	pop	{r4, r7, pc}
 8000292:	bf00      	nop
 8000294:	40012000 	.word	0x40012000
 8000298:	40012100 	.word	0x40012100
 800029c:	40012200 	.word	0x40012200
 80002a0:	fffc10e0 	.word	0xfffc10e0

080002a4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80002ae:	2300      	movs	r3, #0
 80002b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f7ff ff9b 	bl	80001ee <LL_ADC_IsEnabled>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d117      	bne.n	80002ee <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	6811      	ldr	r1, [r2, #0]
 80002ce:	683a      	ldr	r2, [r7, #0]
 80002d0:	6892      	ldr	r2, [r2, #8]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	431a      	orrs	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	431a      	orrs	r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	e001      	b.n	80002f2 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80002ee:	2301      	movs	r3, #1
 80002f0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8000306:	2300      	movs	r3, #0
 8000308:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f7ff ff6f 	bl	80001ee <LL_ADC_IsEnabled>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d12b      	bne.n	800036e <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d009      	beq.n	8000332 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	e005      	b.n	800033e <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689a      	ldr	r2, [r3, #8]
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <LL_ADC_REG_Init+0x80>)
 8000344:	4013      	ands	r3, r2
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	6812      	ldr	r2, [r2, #0]
 800034a:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	68d2      	ldr	r2, [r2, #12]
 8000352:	4311      	orrs	r1, r2
 8000354:	683a      	ldr	r2, [r7, #0]
 8000356:	6912      	ldr	r2, [r2, #16]
 8000358:	430a      	orrs	r2, r1
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4619      	mov	r1, r3
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f7ff ff2e 	bl	80001c8 <LL_ADC_REG_SetSequencerLength>
 800036c:	e001      	b.n	8000372 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800036e:	2301      	movs	r3, #1
 8000370:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000372:	7bfb      	ldrb	r3, [r7, #15]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	c0fffcfd 	.word	0xc0fffcfd

08000380 <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(DACx->CR,
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	f003 0310 	and.w	r3, r3, #16
 8000394:	2101      	movs	r1, #1
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	401a      	ands	r2, r3
                    DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	f003 0310 	and.w	r3, r3, #16
 80003a2:	2101      	movs	r1, #1
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d101      	bne.n	80003b0 <LL_DAC_IsEnabled+0x30>
 80003ac:	2301      	movs	r3, #1
 80003ae:	e000      	b.n	80003b2 <LL_DAC_IsEnabled+0x32>
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	60f8      	str	r0, [r7, #12]
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 80003ca:	2300      	movs	r3, #0
 80003cc:	75fb      	strb	r3, [r7, #23]
                                                  DAC_InitStruct->WaveAutoGenerationConfig));
  }

  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if (LL_DAC_IsEnabled(DACx, DAC_Channel) == 0UL)
 80003ce:	68b9      	ldr	r1, [r7, #8]
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f7ff ffd5 	bl	8000380 <LL_DAC_IsEnabled>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d13a      	bne.n	8000452 <LL_DAC_Init+0x94>
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    /*  - OutputMode                                                          */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d01e      	beq.n	8000422 <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	f003 0310 	and.w	r3, r3, #16
 80003ee:	f640 71fa 	movw	r1, #4090	; 0xffa
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	401a      	ands	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6819      	ldr	r1, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	4319      	orrs	r1, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4319      	orrs	r1, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4319      	orrs	r1, r3
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	f003 0310 	and.w	r3, r3, #16
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	431a      	orrs	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	e019      	b.n	8000456 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	681a      	ldr	r2, [r3, #0]
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	f003 0310 	and.w	r3, r3, #16
 800042c:	21fa      	movs	r1, #250	; 0xfa
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6819      	ldr	r1, [r3, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	4319      	orrs	r1, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	f003 0310 	and.w	r3, r3, #16
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	431a      	orrs	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	e001      	b.n	8000456 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 8000452:	2301      	movs	r3, #1
 8000454:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000456:	7dfb      	ldrb	r3, [r7, #23]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}

08000460 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000460:	b480      	push	{r7}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	60b9      	str	r1, [r7, #8]
 800046a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	fa93 f3a3 	rbit	r3, r3
 800047a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	fab3 f383 	clz	r3, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	2103      	movs	r1, #3
 8000488:	fa01 f303 	lsl.w	r3, r1, r3
 800048c:	43db      	mvns	r3, r3
 800048e:	401a      	ands	r2, r3
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	fa93 f3a3 	rbit	r3, r3
 800049a:	61bb      	str	r3, [r7, #24]
  return result;
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	fab3 f383 	clz	r3, r3
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ac:	431a      	orrs	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]
}
 80004b2:	bf00      	nop
 80004b4:	3724      	adds	r7, #36	; 0x24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80004be:	b480      	push	{r7}
 80004c0:	b085      	sub	sp, #20
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	685a      	ldr	r2, [r3, #4]
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	43db      	mvns	r3, r3
 80004d2:	401a      	ands	r2, r3
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	fb01 f303 	mul.w	r3, r1, r3
 80004dc:	431a      	orrs	r2, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	605a      	str	r2, [r3, #4]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b089      	sub	sp, #36	; 0x24
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	689a      	ldr	r2, [r3, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	fa93 f3a3 	rbit	r3, r3
 8000508:	613b      	str	r3, [r7, #16]
  return result;
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	fab3 f383 	clz	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	2103      	movs	r1, #3
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	43db      	mvns	r3, r3
 800051c:	401a      	ands	r2, r3
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	fa93 f3a3 	rbit	r3, r3
 8000528:	61bb      	str	r3, [r7, #24]
  return result;
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	fab3 f383 	clz	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000540:	bf00      	nop
 8000542:	3724      	adds	r7, #36	; 0x24
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800054c:	b480      	push	{r7}
 800054e:	b089      	sub	sp, #36	; 0x24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	68da      	ldr	r2, [r3, #12]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	fa93 f3a3 	rbit	r3, r3
 8000566:	613b      	str	r3, [r7, #16]
  return result;
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	fab3 f383 	clz	r3, r3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	2103      	movs	r1, #3
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	43db      	mvns	r3, r3
 800057a:	401a      	ands	r2, r3
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	fa93 f3a3 	rbit	r3, r3
 8000586:	61bb      	str	r3, [r7, #24]
  return result;
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	fab3 f383 	clz	r3, r3
 800058e:	b2db      	uxtb	r3, r3
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	431a      	orrs	r2, r3
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	60da      	str	r2, [r3, #12]
}
 800059e:	bf00      	nop
 80005a0:	3724      	adds	r7, #36	; 0x24
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b089      	sub	sp, #36	; 0x24
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	60f8      	str	r0, [r7, #12]
 80005b2:	60b9      	str	r1, [r7, #8]
 80005b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6a1a      	ldr	r2, [r3, #32]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	fa93 f3a3 	rbit	r3, r3
 80005c4:	613b      	str	r3, [r7, #16]
  return result;
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	fab3 f383 	clz	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	210f      	movs	r1, #15
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	fa93 f3a3 	rbit	r3, r3
 80005e4:	61bb      	str	r3, [r7, #24]
  return result;
 80005e6:	69bb      	ldr	r3, [r7, #24]
 80005e8:	fab3 f383 	clz	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80005fc:	bf00      	nop
 80005fe:	3724      	adds	r7, #36	; 0x24
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000608:	b480      	push	{r7}
 800060a:	b089      	sub	sp, #36	; 0x24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	fa93 f3a3 	rbit	r3, r3
 8000624:	613b      	str	r3, [r7, #16]
  return result;
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	fab3 f383 	clz	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	210f      	movs	r1, #15
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	43db      	mvns	r3, r3
 8000638:	401a      	ands	r2, r3
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	61bb      	str	r3, [r7, #24]
  return result;
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fab3 f383 	clz	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	fa01 f303 	lsl.w	r3, r1, r3
 8000658:	431a      	orrs	r2, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800065e:	bf00      	nop
 8000660:	3724      	adds	r7, #36	; 0x24
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b088      	sub	sp, #32
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	fa93 f3a3 	rbit	r3, r3
 8000688:	613b      	str	r3, [r7, #16]
  return result;
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	fab3 f383 	clz	r3, r3
 8000690:	b2db      	uxtb	r3, r3
 8000692:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000694:	e050      	b.n	8000738 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	2101      	movs	r1, #1
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	4013      	ands	r3, r2
 80006a4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d042      	beq.n	8000732 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d003      	beq.n	80006bc <LL_GPIO_Init+0x52>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d10d      	bne.n	80006d8 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	461a      	mov	r2, r3
 80006c2:	69b9      	ldr	r1, [r7, #24]
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff12 	bl	80004ee <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	461a      	mov	r2, r3
 80006d0:	69b9      	ldr	r1, [r7, #24]
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f7ff fef3 	bl	80004be <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	461a      	mov	r2, r3
 80006de:	69b9      	ldr	r1, [r7, #24]
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff33 	bl	800054c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d11a      	bne.n	8000724 <LL_GPIO_Init+0xba>
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	fa93 f3a3 	rbit	r3, r3
 80006f8:	60bb      	str	r3, [r7, #8]
  return result;
 80006fa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b07      	cmp	r3, #7
 8000704:	d807      	bhi.n	8000716 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	461a      	mov	r2, r3
 800070c:	69b9      	ldr	r1, [r7, #24]
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff4b 	bl	80005aa <LL_GPIO_SetAFPin_0_7>
 8000714:	e006      	b.n	8000724 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	461a      	mov	r2, r3
 800071c:	69b9      	ldr	r1, [r7, #24]
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ff72 	bl	8000608 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	461a      	mov	r2, r3
 800072a:	69b9      	ldr	r1, [r7, #24]
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff fe97 	bl	8000460 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	3301      	adds	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	fa22 f303 	lsr.w	r3, r2, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1a7      	bne.n	8000696 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f043 0201 	orr.w	r2, r3, #1
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	615a      	str	r2, [r3, #20]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a3d      	ldr	r2, [pc, #244]	; (80008cc <LL_TIM_Init+0x108>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d013      	beq.n	8000804 <LL_TIM_Init+0x40>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007e2:	d00f      	beq.n	8000804 <LL_TIM_Init+0x40>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a3a      	ldr	r2, [pc, #232]	; (80008d0 <LL_TIM_Init+0x10c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d00b      	beq.n	8000804 <LL_TIM_Init+0x40>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4a39      	ldr	r2, [pc, #228]	; (80008d4 <LL_TIM_Init+0x110>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d007      	beq.n	8000804 <LL_TIM_Init+0x40>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4a38      	ldr	r2, [pc, #224]	; (80008d8 <LL_TIM_Init+0x114>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d003      	beq.n	8000804 <LL_TIM_Init+0x40>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a37      	ldr	r2, [pc, #220]	; (80008dc <LL_TIM_Init+0x118>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4313      	orrs	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <LL_TIM_Init+0x108>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d02b      	beq.n	8000872 <LL_TIM_Init+0xae>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000820:	d027      	beq.n	8000872 <LL_TIM_Init+0xae>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a2a      	ldr	r2, [pc, #168]	; (80008d0 <LL_TIM_Init+0x10c>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d023      	beq.n	8000872 <LL_TIM_Init+0xae>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a29      	ldr	r2, [pc, #164]	; (80008d4 <LL_TIM_Init+0x110>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d01f      	beq.n	8000872 <LL_TIM_Init+0xae>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a28      	ldr	r2, [pc, #160]	; (80008d8 <LL_TIM_Init+0x114>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d01b      	beq.n	8000872 <LL_TIM_Init+0xae>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a27      	ldr	r2, [pc, #156]	; (80008dc <LL_TIM_Init+0x118>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d017      	beq.n	8000872 <LL_TIM_Init+0xae>
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <LL_TIM_Init+0x11c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d013      	beq.n	8000872 <LL_TIM_Init+0xae>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <LL_TIM_Init+0x120>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d00f      	beq.n	8000872 <LL_TIM_Init+0xae>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <LL_TIM_Init+0x124>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d00b      	beq.n	8000872 <LL_TIM_Init+0xae>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a23      	ldr	r2, [pc, #140]	; (80008ec <LL_TIM_Init+0x128>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d007      	beq.n	8000872 <LL_TIM_Init+0xae>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <LL_TIM_Init+0x12c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d003      	beq.n	8000872 <LL_TIM_Init+0xae>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <LL_TIM_Init+0x130>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff6d 	bl	800076c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff59 	bl	8000750 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LL_TIM_Init+0x108>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d003      	beq.n	80008ae <LL_TIM_Init+0xea>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <LL_TIM_Init+0x118>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d105      	bne.n	80008ba <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff67 	bl	8000788 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ff72 	bl	80007a4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40010000 	.word	0x40010000
 80008d0:	40000400 	.word	0x40000400
 80008d4:	40000800 	.word	0x40000800
 80008d8:	40000c00 	.word	0x40000c00
 80008dc:	40010400 	.word	0x40010400
 80008e0:	40014000 	.word	0x40014000
 80008e4:	40014400 	.word	0x40014400
 80008e8:	40014800 	.word	0x40014800
 80008ec:	40001800 	.word	0x40001800
 80008f0:	40001c00 	.word	0x40001c00
 80008f4:	40002000 	.word	0x40002000

080008f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	fbb2 f3f3 	udiv	r3, r2, r3
 800090a:	4a07      	ldr	r2, [pc, #28]	; (8000928 <LL_InitTick+0x30>)
 800090c:	3b01      	subs	r3, #1
 800090e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <LL_InitTick+0x30>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <LL_InitTick+0x30>)
 8000918:	2205      	movs	r2, #5
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000e010 	.word	0xe000e010

0800092c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ffdd 	bl	80008f8 <LL_InitTick>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <LL_mDelay+0x48>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095e:	d00c      	beq.n	800097a <LL_mDelay+0x32>
  {
    Delay++;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000966:	e008      	b.n	800097a <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <LL_mDelay+0x48>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <LL_mDelay+0x32>
    {
      Delay--;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
  while (Delay)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d1f3      	bne.n	8000968 <LL_mDelay+0x20>
    }
  }
}
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <LL_SetSystemCoreClock+0x1c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6013      	str	r3, [r2, #0]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20000000 	.word	0x20000000

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	db0b      	blt.n	8000a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	f003 021f 	and.w	r2, r3, #31
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <__NVIC_EnableIRQ+0x38>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	2001      	movs	r0, #1
 8000a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	db0a      	blt.n	8000a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <__NVIC_SetPriority+0x4c>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	0112      	lsls	r2, r2, #4
 8000a74:	b2d2      	uxtb	r2, r2
 8000a76:	440b      	add	r3, r1
 8000a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7c:	e00a      	b.n	8000a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4908      	ldr	r1, [pc, #32]	; (8000aa4 <__NVIC_SetPriority+0x50>)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	3b04      	subs	r3, #4
 8000a8c:	0112      	lsls	r2, r2, #4
 8000a8e:	b2d2      	uxtb	r2, r2
 8000a90:	440b      	add	r3, r1
 8000a92:	761a      	strb	r2, [r3, #24]
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b089      	sub	sp, #36	; 0x24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	f1c3 0307 	rsb	r3, r3, #7
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	bf28      	it	cs
 8000ac6:	2304      	movcs	r3, #4
 8000ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3304      	adds	r3, #4
 8000ace:	2b06      	cmp	r3, #6
 8000ad0:	d902      	bls.n	8000ad8 <NVIC_EncodePriority+0x30>
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3b03      	subs	r3, #3
 8000ad6:	e000      	b.n	8000ada <NVIC_EncodePriority+0x32>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000adc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43da      	mvns	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	401a      	ands	r2, r3
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af0:	f04f 31ff 	mov.w	r1, #4294967295
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	43d9      	mvns	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	4313      	orrs	r3, r2
         );
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3724      	adds	r7, #36	; 0x24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <LL_ADC_DMA_GetRegAddr>:
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0UL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d103      	bne.n	8000b2c <LL_ADC_DMA_GetRegAddr+0x1c>
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	334c      	adds	r3, #76	; 0x4c
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e001      	b.n	8000b30 <LL_ADC_DMA_GetRegAddr+0x20>
    data_reg_addr = (uint32_t)&((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <LL_ADC_DMA_GetRegAddr+0x30>)
 8000b2e:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8000b30:	68fb      	ldr	r3, [r7, #12]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40012308 	.word	0x40012308

08000b44 <LL_ADC_REG_SetSequencerRanks>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	332c      	adds	r3, #44	; 0x2c
 8000b54:	4619      	mov	r1, r3
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000b5c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	617a      	str	r2, [r7, #20]
  return result;
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f003 031f 	and.w	r3, r3, #31
 8000b84:	211f      	movs	r1, #31
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f003 011f 	and.w	r1, r3, #31
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f003 031f 	and.w	r3, r3, #31
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	3724      	adds	r7, #36	; 0x24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_ADC_REG_SetFlagEndOfConversion>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <LL_ADC_SetChannelSamplingTime>:
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b08d      	sub	sp, #52	; 0x34
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	60f8      	str	r0, [r7, #12]
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	330c      	adds	r3, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	fa92 f2a2 	rbit	r2, r2
 8000bfa:	617a      	str	r2, [r7, #20]
  return result;
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	40d3      	lsrs	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(*preg,
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000c16:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000c1a:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1c:	6a39      	ldr	r1, [r7, #32]
 8000c1e:	fa91 f1a1 	rbit	r1, r1
 8000c22:	61f9      	str	r1, [r7, #28]
  return result;
 8000c24:	69f9      	ldr	r1, [r7, #28]
 8000c26:	fab1 f181 	clz	r1, r1
 8000c2a:	b2c9      	uxtb	r1, r1
 8000c2c:	40cb      	lsrs	r3, r1
 8000c2e:	2107      	movs	r1, #7
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	401a      	ands	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000c3e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000c42:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c46:	fa91 f1a1 	rbit	r1, r1
 8000c4a:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8000c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c4e:	fab1 f181 	clz	r1, r1
 8000c52:	b2c9      	uxtb	r1, r1
 8000c54:	40cb      	lsrs	r3, r1
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	601a      	str	r2, [r3, #0]
}
 8000c62:	bf00      	nop
 8000c64:	3734      	adds	r7, #52	; 0x34
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LL_ADC_Enable>:
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	609a      	str	r2, [r3, #8]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <LL_DAC_Enable>:
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
 8000cb6:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_DAC_ConvertData12RightAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b087      	sub	sp, #28
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3308      	adds	r3, #8
 8000cea:	461a      	mov	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	0c1b      	lsrs	r3, r3, #16
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000cf6:	4413      	add	r3, r2
 8000cf8:	617b      	str	r3, [r7, #20]
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12R1_DACC1DHR, Data);
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000d02:	f023 030f 	bic.w	r3, r3, #15
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	601a      	str	r2, [r3, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	371c      	adds	r7, #28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000d26:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <LL_DMA_EnableStream+0x3c>)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <LL_DMA_EnableStream+0x3c>)
 8000d38:	683a      	ldr	r2, [r7, #0]
 8000d3a:	440a      	add	r2, r1
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	440a      	add	r2, r1
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	0800208c 	.word	0x0800208c

08000d5c <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  *@retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Configuration)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <LL_DMA_ConfigTransfer+0x48>)
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4413      	add	r3, r2
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 335f 	bic.w	r3, r3, #228352	; 0x37c00
 8000d7c:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8000d80:	4908      	ldr	r1, [pc, #32]	; (8000da4 <LL_DMA_ConfigTransfer+0x48>)
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	440a      	add	r2, r1
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	440a      	add	r2, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
             DMA_SxCR_DIR | DMA_SxCR_CIRC | DMA_SxCR_PINC | DMA_SxCR_MINC | DMA_SxCR_PSIZE | DMA_SxCR_MSIZE | DMA_SxCR_PL | DMA_SxCR_PFCTRL,
             Configuration);
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	0800208c 	.word	0x0800208c

08000da8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LL_DMA_SetDataTransferDirection+0x44>)
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000dc8:	4908      	ldr	r1, [pc, #32]	; (8000dec <LL_DMA_SetDataTransferDirection+0x44>)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	440b      	add	r3, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	440b      	add	r3, r1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0800208c 	.word	0x0800208c

08000df0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LL_DMA_SetMode+0x44>)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8000e10:	4908      	ldr	r1, [pc, #32]	; (8000e34 <LL_DMA_SetMode+0x44>)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	440b      	add	r3, r1
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	440b      	add	r3, r1
 8000e1e:	4619      	mov	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	600b      	str	r3, [r1, #0]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	0800208c 	.word	0x0800208c

08000e38 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <LL_DMA_SetPeriphIncMode+0x44>)
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	4413      	add	r3, r2
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000e58:	4908      	ldr	r1, [pc, #32]	; (8000e7c <LL_DMA_SetPeriphIncMode+0x44>)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	440b      	add	r3, r1
 8000e66:	4619      	mov	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	0800208c 	.word	0x0800208c

08000e80 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <LL_DMA_SetMemoryIncMode+0x44>)
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ea0:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <LL_DMA_SetMemoryIncMode+0x44>)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	440b      	add	r3, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	440b      	add	r3, r1
 8000eae:	4619      	mov	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	0800208c 	.word	0x0800208c

08000ec8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8000ed4:	4a0d      	ldr	r2, [pc, #52]	; (8000f0c <LL_DMA_SetPeriphSize+0x44>)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000ee8:	4908      	ldr	r1, [pc, #32]	; (8000f0c <LL_DMA_SetPeriphSize+0x44>)
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	440b      	add	r3, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0800208c 	.word	0x0800208c

08000f10 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LL_DMA_SetMemorySize+0x44>)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <LL_DMA_SetMemorySize+0x44>)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	440b      	add	r3, r1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	4619      	mov	r1, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	440b      	add	r3, r1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0800208c 	.word	0x0800208c

08000f58 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f78:	4908      	ldr	r1, [pc, #32]	; (8000f9c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	440b      	add	r3, r1
 8000f86:	4619      	mov	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	600b      	str	r3, [r1, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0800208c 	.word	0x0800208c

08000fa0 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LL_DMA_SetDataLength+0x44>)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <LL_DMA_SetDataLength+0x44>)
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	440a      	add	r2, r1
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	440a      	add	r2, r1
 8000fce:	4611      	mov	r1, r2
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	604b      	str	r3, [r1, #4]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	0800208c 	.word	0x0800208c

08000fe8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <LL_DMA_SetChannelSelection+0x44>)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001008:	4908      	ldr	r1, [pc, #32]	; (800102c <LL_DMA_SetChannelSelection+0x44>)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	440b      	add	r3, r1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	440b      	add	r3, r1
 8001016:	4619      	mov	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	0800208c 	.word	0x0800208c

08001030 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800103a:	4a0c      	ldr	r2, [pc, #48]	; (800106c <LL_DMA_DisableFifoMode+0x3c>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <LL_DMA_DisableFifoMode+0x3c>)
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	440a      	add	r2, r1
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	4611      	mov	r1, r2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	440a      	add	r2, r1
 8001058:	f023 0304 	bic.w	r3, r3, #4
 800105c:	6153      	str	r3, [r2, #20]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	0800208c 	.word	0x0800208c

08001070 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	2b40      	cmp	r3, #64	; 0x40
 8001082:	d114      	bne.n	80010ae <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <LL_DMA_ConfigAddresses+0x74>)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	461a      	mov	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <LL_DMA_ConfigAddresses+0x74>)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4413      	add	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
 80010ac:	e013      	b.n	80010d6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80010ae:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <LL_DMA_ConfigAddresses+0x74>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <LL_DMA_ConfigAddresses+0x74>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	461a      	mov	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	60d3      	str	r3, [r2, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	0800208c 	.word	0x0800208c

080010e8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80010f2:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <LL_DMA_EnableIT_TC+0x3c>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <LL_DMA_EnableIT_TC+0x3c>)
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	440a      	add	r2, r1
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	4611      	mov	r1, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	440a      	add	r2, r1
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	6013      	str	r3, [r2, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	0800208c 	.word	0x0800208c

08001128 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <LL_RCC_HSE_Enable+0x1c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <LL_RCC_HSE_Enable+0x1c>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <LL_RCC_HSE_IsReady+0x24>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001158:	bf0c      	ite	eq
 800115a:	2301      	moveq	r3, #1
 800115c:	2300      	movne	r3, #0
 800115e:	b2db      	uxtb	r3, r3
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <LL_RCC_SetSysClkSource+0x24>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 0203 	bic.w	r2, r3, #3
 8001180:	4904      	ldr	r1, [pc, #16]	; (8001194 <LL_RCC_SetSysClkSource+0x24>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4313      	orrs	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800

08001198 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <LL_RCC_GetSysClkSource+0x18>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 030c 	and.w	r3, r3, #12
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c4:	4904      	ldr	r1, [pc, #16]	; (80011d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40023800 	.word	0x40023800

080011dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_RCC_SetAPB1Prescaler+0x24>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <LL_RCC_SetAPB1Prescaler+0x24>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40023800 	.word	0x40023800

08001204 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <LL_RCC_SetAPB2Prescaler+0x24>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4313      	orrs	r3, r2
 800121a:	608b      	str	r3, [r1, #8]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800

0800122c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <LL_RCC_PLL_Enable+0x1c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <LL_RCC_PLL_Enable+0x1c>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <LL_RCC_PLL_IsReady+0x24>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001288:	4013      	ands	r3, r2
 800128a:	68f9      	ldr	r1, [r7, #12]
 800128c:	68ba      	ldr	r2, [r7, #8]
 800128e:	4311      	orrs	r1, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	0192      	lsls	r2, r2, #6
 8001294:	430a      	orrs	r2, r1
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40023800 	.word	0x40023800
 80012bc:	ffbf8000 	.word	0xffbf8000

080012c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40023800 	.word	0x40023800

080012f0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <LL_APB1_GRP1_EnableClock+0x2c>)
 80012fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <LL_APB1_GRP1_EnableClock+0x2c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800

08001320 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <LL_APB2_GRP1_EnableClock+0x2c>)
 800132a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <LL_APB2_GRP1_EnableClock+0x2c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4313      	orrs	r3, r2
 8001332:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40023800 	.word	0x40023800

08001350 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <LL_FLASH_SetLatency+0x24>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 0207 	bic.w	r2, r3, #7
 8001360:	4904      	ldr	r1, [pc, #16]	; (8001374 <LL_FLASH_SetLatency+0x24>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	40023c00 	.word	0x40023c00

08001378 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <LL_FLASH_GetLatency+0x18>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40007000 	.word	0x40007000

080013bc <LL_TIM_EnableCounter>:
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_TIM_DisableARRPreload>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_TIM_SetTriggerOutput>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	605a      	str	r2, [r3, #4]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_TIM_DisableMasterSlaveMode>:
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	609a      	str	r2, [r3, #8]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_TIM_EnableIT_UPDATE>:
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4013      	ands	r3, r2
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	bf0c      	ite	eq
 800147a:	2301      	moveq	r3, #1
 800147c:	2300      	movne	r3, #0
 800147e:	b2db      	uxtb	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001490:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001494:	f7ff ff44 	bl	8001320 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001498:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800149c:	f7ff ff28 	bl	80012f0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f7ff fa87 	bl	80009b4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a6:	f000 fab5 	bl	8001a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014aa:	f000 fca1 	bl	8001df0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014ae:	f000 fc87 	bl	8001dc0 <MX_DMA_Init>
  MX_ADC1_Init();
 80014b2:	f000 faf3 	bl	8001a9c <MX_ADC1_Init>
  MX_ADC2_Init();
 80014b6:	f000 fb9f 	bl	8001bf8 <MX_ADC2_Init>
  MX_DAC_Init();
 80014ba:	f000 fbfb 	bl	8001cb4 <MX_DAC_Init>
  MX_TIM6_Init();
 80014be:	f000 fc45 	bl	8001d4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  LL_DAC_Enable(DAC, LL_DAC_CHANNEL_2);
 80014c2:	492d      	ldr	r1, [pc, #180]	; (8001578 <main+0xec>)
 80014c4:	482d      	ldr	r0, [pc, #180]	; (800157c <main+0xf0>)
 80014c6:	f7ff fbf2 	bl	8000cae <LL_DAC_Enable>
  LL_mDelay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f7ff fa3c 	bl	8000948 <LL_mDelay>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    regime = LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_4);
 80014d0:	2110      	movs	r1, #16
 80014d2:	482b      	ldr	r0, [pc, #172]	; (8001580 <main+0xf4>)
 80014d4:	f7ff ffc5 	bl	8001462 <LL_GPIO_IsInputPinSet>
 80014d8:	4603      	mov	r3, r0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b29      	ldr	r3, [pc, #164]	; (8001584 <main+0xf8>)
 80014de:	701a      	strb	r2, [r3, #0]

    if (LL_GPIO_IsInputPinSet(GPIOE, LL_GPIO_PIN_7) == 0)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	4829      	ldr	r0, [pc, #164]	; (8001588 <main+0xfc>)
 80014e4:	f7ff ffbd 	bl	8001462 <LL_GPIO_IsInputPinSet>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d103      	bne.n	80014f6 <main+0x6a>
  	  Scale = 0;
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <main+0x100>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e032      	b.n	800155c <main+0xd0>
    else if (LL_GPIO_IsInputPinSet(GPIOE, LL_GPIO_PIN_8) == 0)
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	4823      	ldr	r0, [pc, #140]	; (8001588 <main+0xfc>)
 80014fc:	f7ff ffb1 	bl	8001462 <LL_GPIO_IsInputPinSet>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d103      	bne.n	800150e <main+0x82>
  	  Scale = 1;
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <main+0x100>)
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	e026      	b.n	800155c <main+0xd0>
    else if (LL_GPIO_IsInputPinSet(GPIOE, LL_GPIO_PIN_9) == 0)
 800150e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <main+0xfc>)
 8001514:	f7ff ffa5 	bl	8001462 <LL_GPIO_IsInputPinSet>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <main+0x9a>
  	  Scale = 2;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <main+0x100>)
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e01a      	b.n	800155c <main+0xd0>
    else if (LL_GPIO_IsInputPinSet(GPIOE, LL_GPIO_PIN_10) == 0)
 8001526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152a:	4817      	ldr	r0, [pc, #92]	; (8001588 <main+0xfc>)
 800152c:	f7ff ff99 	bl	8001462 <LL_GPIO_IsInputPinSet>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <main+0xb2>
  	  Scale = 3;
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <main+0x100>)
 8001538:	2203      	movs	r2, #3
 800153a:	701a      	strb	r2, [r3, #0]
 800153c:	e00e      	b.n	800155c <main+0xd0>
    else if (LL_GPIO_IsInputPinSet(GPIOE, LL_GPIO_PIN_11) == 0)
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	4811      	ldr	r0, [pc, #68]	; (8001588 <main+0xfc>)
 8001544:	f7ff ff8d 	bl	8001462 <LL_GPIO_IsInputPinSet>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <main+0xca>
  	  Scale = 4;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <main+0x100>)
 8001550:	2204      	movs	r2, #4
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	e002      	b.n	800155c <main+0xd0>
    else
  	  Scale = 5;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <main+0x100>)
 8001558:	2205      	movs	r2, #5
 800155a:	701a      	strb	r2, [r3, #0]

    if (regime == 1)
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <main+0xf8>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <main+0xe0>
  	  PHASOMETER();
 8001566:	f000 f889 	bl	800167c <PHASOMETER>
 800156a:	e001      	b.n	8001570 <main+0xe4>
    else
  	  CALIBRATION();
 800156c:	f000 f832 	bl	80015d4 <CALIBRATION>
 8001570:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	15430012 	.word	0x15430012
 800157c:	40007400 	.word	0x40007400
 8001580:	40020000 	.word	0x40020000
 8001584:	20000024 	.word	0x20000024
 8001588:	40021000 	.word	0x40021000
 800158c:	20000030 	.word	0x20000030

08001590 <ADC_DMA_TransferComplete_Callback>:

void ADC_DMA_TransferComplete_Callback()
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  //data[0] = (ADC_Data & 0b00000000111111110000000000000000) >> 16;
	ADC_Data[0] = (Data & 0x0fff0000) >> 16;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <ADC_DMA_TransferComplete_Callback+0x38>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	0c1b      	lsrs	r3, r3, #16
 800159a:	b29b      	uxth	r3, r3
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <ADC_DMA_TransferComplete_Callback+0x3c>)
 80015a4:	801a      	strh	r2, [r3, #0]
  //data[1] = (ADC_Data & 0b00000000000000000000000011111111);
	ADC_Data[1] = (Data & 0x00000fff);
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <ADC_DMA_TransferComplete_Callback+0x38>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <ADC_DMA_TransferComplete_Callback+0x3c>)
 80015b4:	805a      	strh	r2, [r3, #2]
	fl_adc = 1;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <ADC_DMA_TransferComplete_Callback+0x40>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000028 	.word	0x20000028
 80015cc:	20000034 	.word	0x20000034
 80015d0:	20000020 	.word	0x20000020

080015d4 <CALIBRATION>:

void CALIBRATION()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0

	const uint16_t mult[6] = {16384, 8192, 4096, 2048, 1024, 512};
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <CALIBRATION+0x60>)
 80015dc:	463b      	mov	r3, r7
 80015de:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint16_t signal = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	81fb      	strh	r3, [r7, #14]

	LL_TIM_EnableIT_UPDATE(TIM6);
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <CALIBRATION+0x64>)
 80015ea:	f7ff ff2a 	bl	8001442 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM6);
 80015ee:	4812      	ldr	r0, [pc, #72]	; (8001638 <CALIBRATION+0x64>)
 80015f0:	f7ff fee4 	bl	80013bc <LL_TIM_EnableCounter>

	while (1)
	{
		if (TIM_flag == 1)
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <CALIBRATION+0x68>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d1fb      	bne.n	80015f4 <CALIBRATION+0x20>
		{
			signal = counter * mult[Scale];
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <CALIBRATION+0x6c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	f107 0210 	add.w	r2, r7, #16
 8001608:	4413      	add	r3, r2
 800160a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <CALIBRATION+0x70>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	fb12 f303 	smulbb	r3, r2, r3
 8001618:	81fb      	strh	r3, [r7, #14]
			LL_DAC_ConvertData12RightAligned(DAC, LL_DAC_CHANNEL_2, (uint16_t)(signal/16));
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	b29b      	uxth	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4909      	ldr	r1, [pc, #36]	; (8001648 <CALIBRATION+0x74>)
 8001624:	4809      	ldr	r0, [pc, #36]	; (800164c <CALIBRATION+0x78>)
 8001626:	f7ff fb58 	bl	8000cda <LL_DAC_ConvertData12RightAligned>
			TIM_flag = 0;
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <CALIBRATION+0x68>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
		if (TIM_flag == 1)
 8001630:	e7e0      	b.n	80015f4 <CALIBRATION+0x20>
 8001632:	bf00      	nop
 8001634:	08002050 	.word	0x08002050
 8001638:	40001000 	.word	0x40001000
 800163c:	20000021 	.word	0x20000021
 8001640:	20000030 	.word	0x20000030
 8001644:	2000002e 	.word	0x2000002e
 8001648:	15430012 	.word	0x15430012
 800164c:	40007400 	.word	0x40007400

08001650 <Timer_Interrupt>:
		}
	}
}

void Timer_Interrupt(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
	TIM_flag = 1;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <Timer_Interrupt+0x24>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
	counter++;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <Timer_Interrupt+0x28>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	3301      	adds	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <Timer_Interrupt+0x28>)
 8001666:	801a      	strh	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000021 	.word	0x20000021
 8001678:	2000002e 	.word	0x2000002e

0800167c <PHASOMETER>:

void PHASOMETER(void)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b092      	sub	sp, #72	; 0x48
 8001680:	af02      	add	r7, sp, #8
	const uint16_t Multiplier[6][4] = {{16384, 4096, 67, 20}, {8192, 2048, 67, 40}, {4096, 1024, 67, 80}, {2048, 512, 67, 160}, {1024, 256, 67, 320}, {512, 128, 67, 640}};
 8001682:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <PHASOMETER+0x294>)
 8001684:	463c      	mov	r4, r7
 8001686:	461d      	mov	r5, r3
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001690:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const uint16_t upV = 2000;
 8001698:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800169c:	86fb      	strh	r3, [r7, #54]	; 0x36
	const uint16_t dwV = 550;
 800169e:	f240 2326 	movw	r3, #550	; 0x226
 80016a2:	86bb      	strh	r3, [r7, #52]	; 0x34


	uint16_t Uout = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	int8_t zone;
	int16_t fi_ref, fi_curr;
	int8_t n;


	  LL_DMA_ConfigTransfer(DMA2,
 80016a8:	4a9a      	ldr	r2, [pc, #616]	; (8001914 <PHASOMETER+0x298>)
 80016aa:	2100      	movs	r1, #0
 80016ac:	489a      	ldr	r0, [pc, #616]	; (8001918 <PHASOMETER+0x29c>)
 80016ae:	f7ff fb55 	bl	8000d5c <LL_DMA_ConfigTransfer>
	                          LL_DMA_MEMORY_INCREMENT           |
	                          LL_DMA_PDATAALIGN_WORD        |
	                          LL_DMA_MDATAALIGN_WORD        |
	                          LL_DMA_PRIORITY_HIGH               );

	    LL_DMA_ConfigAddresses(DMA2,
 80016b2:	2101      	movs	r1, #1
 80016b4:	4899      	ldr	r0, [pc, #612]	; (800191c <PHASOMETER+0x2a0>)
 80016b6:	f7ff fa2b 	bl	8000b10 <LL_ADC_DMA_GetRegAddr>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4998      	ldr	r1, [pc, #608]	; (8001920 <PHASOMETER+0x2a4>)
 80016be:	2300      	movs	r3, #0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	460b      	mov	r3, r1
 80016c4:	2100      	movs	r1, #0
 80016c6:	4894      	ldr	r0, [pc, #592]	; (8001918 <PHASOMETER+0x29c>)
 80016c8:	f7ff fcd2 	bl	8001070 <LL_DMA_ConfigAddresses>
	                           LL_DMA_CHANNEL_0,
	                           LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA_MULTI),
	                           (uint32_t)&Data,
	                           LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

	    LL_DMA_SetDataLength(DMA2, LL_DMA_CHANNEL_0, 1);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2100      	movs	r1, #0
 80016d0:	4891      	ldr	r0, [pc, #580]	; (8001918 <PHASOMETER+0x29c>)
 80016d2:	f7ff fc65 	bl	8000fa0 <LL_DMA_SetDataLength>

	    LL_DMA_EnableIT_TC(DMA2, LL_DMA_CHANNEL_0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	488f      	ldr	r0, [pc, #572]	; (8001918 <PHASOMETER+0x29c>)
 80016da:	f7ff fd05 	bl	80010e8 <LL_DMA_EnableIT_TC>

	    LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 80016de:	2100      	movs	r1, #0
 80016e0:	488d      	ldr	r0, [pc, #564]	; (8001918 <PHASOMETER+0x29c>)
 80016e2:	f7ff fb1b 	bl	8000d1c <LL_DMA_EnableStream>

	    LL_ADC_Enable(ADC1);
 80016e6:	488d      	ldr	r0, [pc, #564]	; (800191c <PHASOMETER+0x2a0>)
 80016e8:	f7ff fac1 	bl	8000c6e <LL_ADC_Enable>
	    LL_ADC_Enable(ADC2);
 80016ec:	488d      	ldr	r0, [pc, #564]	; (8001924 <PHASOMETER+0x2a8>)
 80016ee:	f7ff fabe 	bl	8000c6e <LL_ADC_Enable>
	    LL_ADC_REG_StartConversionSWStart(ADC1);
 80016f2:	488a      	ldr	r0, [pc, #552]	; (800191c <PHASOMETER+0x2a0>)
 80016f4:	f7ff facb 	bl	8000c8e <LL_ADC_REG_StartConversionSWStart>
	/* объявление переменных */
	/* ПЕРВЫЙ ШАГ РАБОТЫ ПРОГРАММЫ */
	/* ПЕРВЫЙ ШАГ РАБОТЫ ПРОГРАММЫ */

	/* определяем рабочую зону */
	if (ADC_Data[0] > ADC_Data[1])
 80016f8:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <PHASOMETER+0x2ac>)
 80016fa:	881a      	ldrh	r2, [r3, #0]
 80016fc:	4b8a      	ldr	r3, [pc, #552]	; (8001928 <PHASOMETER+0x2ac>)
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	429a      	cmp	r2, r3
 8001702:	d90c      	bls.n	800171e <PHASOMETER+0xa2>
	{
	  if (ADC_Data[1] < dwV)
 8001704:	4b88      	ldr	r3, [pc, #544]	; (8001928 <PHASOMETER+0x2ac>)
 8001706:	885b      	ldrh	r3, [r3, #2]
 8001708:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800170a:	429a      	cmp	r2, r3
 800170c:	d903      	bls.n	8001716 <PHASOMETER+0x9a>
		  zone = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001714:	e00f      	b.n	8001736 <PHASOMETER+0xba>
	  else
		  zone = 1;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800171c:	e00b      	b.n	8001736 <PHASOMETER+0xba>
	}
	else
	{
	  if (ADC_Data[1] > upV)
 800171e:	4b82      	ldr	r3, [pc, #520]	; (8001928 <PHASOMETER+0x2ac>)
 8001720:	885b      	ldrh	r3, [r3, #2]
 8001722:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001724:	429a      	cmp	r2, r3
 8001726:	d203      	bcs.n	8001730 <PHASOMETER+0xb4>
		  zone = 2;
 8001728:	2302      	movs	r3, #2
 800172a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800172e:	e002      	b.n	8001736 <PHASOMETER+0xba>
	  else
		  zone = 3;
 8001730:	2303      	movs	r3, #3
 8001732:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	}
	/* определяем рабочую зону */

	/* определяем знак угла наклона */
	if ((zone / 2) == 0)
 8001736:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800173a:	3301      	adds	r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d803      	bhi.n	800174a <PHASOMETER+0xce>
	  n = 1;
 8001742:	2301      	movs	r3, #1
 8001744:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001748:	e002      	b.n	8001750 <PHASOMETER+0xd4>
	else
	  n = -1;
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	/* определяем знак угла наклона */

	channel = (zone % 2); /* определяем канал считывания АЦП */
 8001750:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8001754:	2b00      	cmp	r3, #0
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	bfb8      	it	lt
 800175c:	425b      	neglt	r3, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <PHASOMETER+0x2b0>)
 8001764:	701a      	strb	r2, [r3, #0]

	fi_ref = (zone * Multiplier[Scale][1]) + n * (ADC_Data[channel] - 1229) * Multiplier[Scale][2] / Multiplier[Scale][3]; /* определяем угол  начальный момент времени*/
 8001766:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <PHASOMETER+0x2b4>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001778:	440b      	add	r3, r1
 800177a:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 800177e:	fb12 f303 	smulbb	r3, r2, r3
 8001782:	b29a      	uxth	r2, r3
 8001784:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001788:	4968      	ldr	r1, [pc, #416]	; (800192c <PHASOMETER+0x2b0>)
 800178a:	7809      	ldrb	r1, [r1, #0]
 800178c:	b2c9      	uxtb	r1, r1
 800178e:	4608      	mov	r0, r1
 8001790:	4965      	ldr	r1, [pc, #404]	; (8001928 <PHASOMETER+0x2ac>)
 8001792:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8001796:	f2a1 41cd 	subw	r1, r1, #1229	; 0x4cd
 800179a:	fb01 f103 	mul.w	r1, r1, r3
 800179e:	4b64      	ldr	r3, [pc, #400]	; (8001930 <PHASOMETER+0x2b4>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80017aa:	4403      	add	r3, r0
 80017ac:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80017b0:	fb03 f101 	mul.w	r1, r3, r1
 80017b4:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <PHASOMETER+0x2b4>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80017c0:	4403      	add	r3, r0
 80017c2:	f833 3c3a 	ldrh.w	r3, [r3, #-58]
 80017c6:	fb91 f3f3 	sdiv	r3, r1, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	877b      	strh	r3, [r7, #58]	; 0x3a
	/* БЕСКОНЕЧНЫЙ ЦИКЛ */
	/* БЕСКОНЕЧНЫЙ ЦИКЛ */

	while (1)
	{
	  if (fl_adc != 0)
 80017d2:	4b58      	ldr	r3, [pc, #352]	; (8001934 <PHASOMETER+0x2b8>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0fb      	beq.n	80017d2 <PHASOMETER+0x156>
	  {
		  /* определяем, находимся ли в рабочей зоне. если нет, то меняем ее */
		  if (ADC_Data[channel] > upV)
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <PHASOMETER+0x2b0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b51      	ldr	r3, [pc, #324]	; (8001928 <PHASOMETER+0x2ac>)
 80017e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017e8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d24a      	bcs.n	8001884 <PHASOMETER+0x208>
		  {
			  zone = zone + n;
 80017ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80017f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80017f6:	4413      	add	r3, r2
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			  if (zone == 4)
 80017fe:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8001802:	2b04      	cmp	r3, #4
 8001804:	d110      	bne.n	8001828 <PHASOMETER+0x1ac>
			  {
				  zone = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  fi_ref = fi_ref - Multiplier[Scale][0];
 800180c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <PHASOMETER+0x2b4>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800181a:	440b      	add	r3, r1
 800181c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001826:	e014      	b.n	8001852 <PHASOMETER+0x1d6>
			  }
			  else if (zone == -1)
 8001828:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001830:	d10f      	bne.n	8001852 <PHASOMETER+0x1d6>
			  {
				  zone = 3;
 8001832:	2303      	movs	r3, #3
 8001834:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  fi_ref = fi_ref + Multiplier[Scale][0];
 8001838:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <PHASOMETER+0x2b4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001844:	4413      	add	r3, r2
 8001846:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 800184a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	877b      	strh	r3, [r7, #58]	; 0x3a
			  }
			  if ((zone / 2) == 0)
 8001852:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001856:	3301      	adds	r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d803      	bhi.n	8001866 <PHASOMETER+0x1ea>
				  n = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001864:	e002      	b.n	800186c <PHASOMETER+0x1f0>
			  else
				  n = -1;
 8001866:	23ff      	movs	r3, #255	; 0xff
 8001868:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			  channel = (zone % 2);
 800186c:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8001870:	2b00      	cmp	r3, #0
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	bfb8      	it	lt
 8001878:	425b      	neglt	r3, r3
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b2b      	ldr	r3, [pc, #172]	; (800192c <PHASOMETER+0x2b0>)
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e067      	b.n	8001954 <PHASOMETER+0x2d8>
		  }
		  else if (ADC_Data[channel] < dwV)
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <PHASOMETER+0x2b0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <PHASOMETER+0x2ac>)
 800188e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001892:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001894:	429a      	cmp	r2, r3
 8001896:	d95d      	bls.n	8001954 <PHASOMETER+0x2d8>
		  {
			  zone = zone - n;
 8001898:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800189c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			  if (zone == 4)
 80018a8:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d110      	bne.n	80018d2 <PHASOMETER+0x256>
			  {
				  zone = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  fi_ref = fi_ref - Multiplier[Scale][0];
 80018b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <PHASOMETER+0x2b4>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80018c4:	440b      	add	r3, r1
 80018c6:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	877b      	strh	r3, [r7, #58]	; 0x3a
 80018d0:	e014      	b.n	80018fc <PHASOMETER+0x280>
			  }
			  else if (zone == -1)
 80018d2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80018d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018da:	d10f      	bne.n	80018fc <PHASOMETER+0x280>
			  {
				  zone = 3;
 80018dc:	2303      	movs	r3, #3
 80018de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  fi_ref = fi_ref + Multiplier[Scale][0];
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <PHASOMETER+0x2b4>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018ee:	4413      	add	r3, r2
 80018f0:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 80018f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	877b      	strh	r3, [r7, #58]	; 0x3a
			  }
			  if ((zone / 2) == 0)
 80018fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001900:	3301      	adds	r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d817      	bhi.n	8001938 <PHASOMETER+0x2bc>
				  n = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800190e:	e016      	b.n	800193e <PHASOMETER+0x2c2>
 8001910:	0800205c 	.word	0x0800205c
 8001914:	00025500 	.word	0x00025500
 8001918:	40026400 	.word	0x40026400
 800191c:	40012000 	.word	0x40012000
 8001920:	20000028 	.word	0x20000028
 8001924:	40012100 	.word	0x40012100
 8001928:	20000034 	.word	0x20000034
 800192c:	2000002c 	.word	0x2000002c
 8001930:	20000030 	.word	0x20000030
 8001934:	20000020 	.word	0x20000020
			  else
				  n = -1;
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
			  channel = (zone % 2);
 800193e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8001942:	2b00      	cmp	r3, #0
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	bfb8      	it	lt
 800194a:	425b      	neglt	r3, r3
 800194c:	b25b      	sxtb	r3, r3
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b2a      	ldr	r3, [pc, #168]	; (80019fc <PHASOMETER+0x380>)
 8001952:	701a      	strb	r2, [r3, #0]
		  }
		  /* определяем, находимся ли в рабочей зоне. если нет, то меняем ее */

		  fi_curr = (zone * Multiplier[Scale][1]) + n * (ADC_Data[channel] - 1229) * Multiplier[Scale][2] / Multiplier[Scale][3]; /* определяем текущий угол */
 8001954:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <PHASOMETER+0x384>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001966:	440b      	add	r3, r1
 8001968:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 800196c:	fb12 f303 	smulbb	r3, r2, r3
 8001970:	b29a      	uxth	r2, r3
 8001972:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <PHASOMETER+0x380>)
 8001978:	7809      	ldrb	r1, [r1, #0]
 800197a:	b2c9      	uxtb	r1, r1
 800197c:	4608      	mov	r0, r1
 800197e:	4921      	ldr	r1, [pc, #132]	; (8001a04 <PHASOMETER+0x388>)
 8001980:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8001984:	f2a1 41cd 	subw	r1, r1, #1229	; 0x4cd
 8001988:	fb01 f103 	mul.w	r1, r1, r3
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <PHASOMETER+0x384>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001998:	4403      	add	r3, r0
 800199a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800199e:	fb03 f101 	mul.w	r1, r3, r1
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <PHASOMETER+0x384>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80019ae:	4403      	add	r3, r0
 80019b0:	f833 3c3a 	ldrh.w	r3, [r3, #-58]
 80019b4:	fb91 f3f3 	sdiv	r3, r1, r3
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	867b      	strh	r3, [r7, #50]	; 0x32

		  if (Uout + (fi_curr - fi_ref) > 0)
 80019c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80019c2:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80019c6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	dd06      	ble.n	80019e0 <PHASOMETER+0x364>
			  Uout = Uout + (fi_curr - fi_ref);
 80019d2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80019d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b29a      	uxth	r2, r3
 80019da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019dc:	4413      	add	r3, r2
 80019de:	87fb      	strh	r3, [r7, #62]	; 0x3e

		  fi_ref = fi_curr; /*  сохраняем значение на данном шаге */
 80019e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019e2:	877b      	strh	r3, [r7, #58]	; 0x3a

		  fl_adc = 0;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <PHASOMETER+0x38c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]

		  LL_DAC_ConvertData12RightAligned(DAC, LL_DAC_CHANNEL_2, (uint16_t)(Uout/16));
 80019ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	461a      	mov	r2, r3
 80019f2:	4906      	ldr	r1, [pc, #24]	; (8001a0c <PHASOMETER+0x390>)
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <PHASOMETER+0x394>)
 80019f6:	f7ff f970 	bl	8000cda <LL_DAC_ConvertData12RightAligned>
	  if (fl_adc != 0)
 80019fa:	e6ea      	b.n	80017d2 <PHASOMETER+0x156>
 80019fc:	2000002c 	.word	0x2000002c
 8001a00:	20000030 	.word	0x20000030
 8001a04:	20000034 	.word	0x20000034
 8001a08:	20000020 	.word	0x20000020
 8001a0c:	15430012 	.word	0x15430012
 8001a10:	40007400 	.word	0x40007400

08001a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001a18:	2005      	movs	r0, #5
 8001a1a:	f7ff fc99 	bl	8001350 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001a1e:	bf00      	nop
 8001a20:	f7ff fcaa 	bl	8001378 <LL_FLASH_GetLatency>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d1fa      	bne.n	8001a20 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a2a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a2e:	f7ff fcb1 	bl	8001394 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001a32:	f7ff fb79 	bl	8001128 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001a36:	bf00      	nop
 8001a38:	f7ff fb86 	bl	8001148 <LL_RCC_HSE_IsReady>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d1fa      	bne.n	8001a38 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8001a42:	2300      	movs	r3, #0
 8001a44:	22a8      	movs	r2, #168	; 0xa8
 8001a46:	2104      	movs	r1, #4
 8001a48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a4c:	f7ff fc12 	bl	8001274 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a50:	f7ff fbec 	bl	800122c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a54:	bf00      	nop
 8001a56:	f7ff fbf9 	bl	800124c <LL_RCC_PLL_IsReady>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d1fa      	bne.n	8001a56 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fba7 	bl	80011b4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8001a66:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001a6a:	f7ff fbb7 	bl	80011dc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001a6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a72:	f7ff fbc7 	bl	8001204 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7ff fb7a 	bl	8001170 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a7c:	bf00      	nop
 8001a7e:	f7ff fb8b 	bl	8001198 <LL_RCC_GetSysClkSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d1fa      	bne.n	8001a7e <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <SystemClock_Config+0x84>)
 8001a8a:	f7fe ff4f 	bl	800092c <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8001a8e:	4802      	ldr	r0, [pc, #8]	; (8001a98 <SystemClock_Config+0x84>)
 8001a90:	f7fe ff80 	bl	8000994 <LL_SetSystemCoreClock>
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	0a037a00 	.word	0x0a037a00

08001a9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b092      	sub	sp, #72	; 0x48
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001aa2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001abe:	f107 0318 	add.w	r3, r7, #24
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8001adc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ae0:	f7ff fc1e 	bl	8001320 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff fbeb 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0-WKUP   ------> ADC1_IN0
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001aea:	2301      	movs	r3, #1
 8001aec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	483b      	ldr	r0, [pc, #236]	; (8001be8 <MX_ADC1_Init+0x14c>)
 8001afc:	f7fe fdb5 	bl	800066a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	4839      	ldr	r0, [pc, #228]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b06:	f7ff fa6f 	bl	8000fe8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4837      	ldr	r0, [pc, #220]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b10:	f7ff f94a 	bl	8000da8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	4834      	ldr	r0, [pc, #208]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b1a:	f7ff fa1d 	bl	8000f58 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b22:	2100      	movs	r1, #0
 8001b24:	4831      	ldr	r0, [pc, #196]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b26:	f7ff f963 	bl	8000df0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	482f      	ldr	r0, [pc, #188]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b30:	f7ff f982 	bl	8000e38 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8001b34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b38:	2100      	movs	r1, #0
 8001b3a:	482c      	ldr	r0, [pc, #176]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b3c:	f7ff f9a0 	bl	8000e80 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_WORD);
 8001b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b44:	2100      	movs	r1, #0
 8001b46:	4829      	ldr	r0, [pc, #164]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b48:	f7ff f9be 	bl	8000ec8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_WORD);
 8001b4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b50:	2100      	movs	r1, #0
 8001b52:	4826      	ldr	r0, [pc, #152]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b54:	f7ff f9dc 	bl	8000f10 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4824      	ldr	r0, [pc, #144]	; (8001bec <MX_ADC1_Init+0x150>)
 8001b5c:	f7ff fa68 	bl	8001030 <LL_DMA_DisableFifoMode>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001b6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b70:	4619      	mov	r1, r3
 8001b72:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <MX_ADC1_Init+0x154>)
 8001b74:	f7fe fb96 	bl	80002a4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001b84:	2302      	movs	r3, #2
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001b88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4816      	ldr	r0, [pc, #88]	; (8001bf0 <MX_ADC1_Init+0x154>)
 8001b96:	f7fe fbb1 	bl	80002fc <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <MX_ADC1_Init+0x154>)
 8001b9e:	f7ff f807 	bl	8000bb0 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV6;
 8001ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba6:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_DUAL_REG_SIMULT;
 8001ba8:	2306      	movs	r3, #6
 8001baa:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.MultiDMATransfer = LL_ADC_MULTI_REG_DMA_UNLMT_2;
 8001bac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bb0:	623b      	str	r3, [r7, #32]
  ADC_CommonInitStruct.MultiTwoSamplingDelay = LL_ADC_MULTI_TWOSMP_DELAY_20CYCLES;
 8001bb2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_ADC1_Init+0x158>)
 8001bc0:	f7fe fb28 	bl	8000214 <LL_ADC_CommonInit>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_0);
 8001bc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bcc:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <MX_ADC1_Init+0x154>)
 8001bce:	f7fe ffb9 	bl	8000b44 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_0, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_ADC1_Init+0x154>)
 8001bda:	f7fe fffc 	bl	8000bd6 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3748      	adds	r7, #72	; 0x48
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40026400 	.word	0x40026400
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	40012300 	.word	0x40012300

08001bf8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
 8001c28:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC2);
 8001c2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c2e:	f7ff fb77 	bl	8001320 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff fb44 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA2   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <MX_ADC2_Init+0xb0>)
 8001c4a:	f7fe fd0e 	bl	800066a <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <MX_ADC2_Init+0xb4>)
 8001c62:	f7fe fb1f 	bl	80002a4 <LL_ADC_Init>
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001c76:	f107 0318 	add.w	r3, r7, #24
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <MX_ADC2_Init+0xb4>)
 8001c7e:	f7fe fb3d 	bl	80002fc <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC2, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
 8001c82:	2100      	movs	r1, #0
 8001c84:	4809      	ldr	r0, [pc, #36]	; (8001cac <MX_ADC2_Init+0xb4>)
 8001c86:	f7fe ff93 	bl	8000bb0 <LL_ADC_REG_SetFlagEndOfConversion>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <MX_ADC2_Init+0xb8>)
 8001c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <MX_ADC2_Init+0xb4>)
 8001c92:	f7fe ff57 	bl	8000b44 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_3CYCLES);
 8001c96:	2200      	movs	r2, #0
 8001c98:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <MX_ADC2_Init+0xb8>)
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_ADC2_Init+0xb4>)
 8001c9c:	f7fe ff9b 	bl	8000bd6 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	3738      	adds	r7, #56	; 0x38
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40012100 	.word	0x40012100
 8001cb0:	02600002 	.word	0x02600002

08001cb4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8001cba:	f107 0318 	add.w	r3, r7, #24
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	463b      	mov	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8001cd8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001cdc:	f7ff fb08 	bl	80012f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff faed 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>
  /**DAC GPIO Configuration
  PA5   ------> DAC_OUT2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ce6:	2320      	movs	r3, #32
 8001ce8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cea:	2303      	movs	r3, #3
 8001cec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4812      	ldr	r0, [pc, #72]	; (8001d40 <MX_DAC_Init+0x8c>)
 8001cf8:	f7fe fcb7 	bl	800066a <LL_GPIO_Init>

  /* DAC interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001cfc:	f7fe fe7e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fece 	bl	8000aa8 <NVIC_EncodePriority>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	2036      	movs	r0, #54	; 0x36
 8001d12:	f7fe fe9f 	bl	8000a54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d16:	2036      	movs	r0, #54	; 0x36
 8001d18:	f7fe fe7e 	bl	8000a18 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC channel OUT2 config
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8001d1c:	2338      	movs	r3, #56	; 0x38
 8001d1e:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_2, &DAC_InitStruct);
 8001d28:	f107 0318 	add.w	r3, r7, #24
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4905      	ldr	r1, [pc, #20]	; (8001d44 <MX_DAC_Init+0x90>)
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_DAC_Init+0x94>)
 8001d32:	f7fe fb44 	bl	80003be <LL_DAC_Init>
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40020000 	.word	0x40020000
 8001d44:	15430012 	.word	0x15430012
 8001d48:	40007400 	.word	0x40007400

08001d4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001d60:	2010      	movs	r0, #16
 8001d62:	f7ff fac5 	bl	80012f0 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d66:	f7fe fe49 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fe99 	bl	8000aa8 <NVIC_EncodePriority>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	2036      	movs	r0, #54	; 0x36
 8001d7c:	f7fe fe6a 	bl	8000a54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d80:	2036      	movs	r0, #54	; 0x36
 8001d82:	f7fe fe49 	bl	8000a18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 20999;
 8001d86:	f245 2307 	movw	r3, #20999	; 0x5207
 8001d8a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 499;
 8001d90:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001d94:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4808      	ldr	r0, [pc, #32]	; (8001dbc <MX_TIM6_Init+0x70>)
 8001d9c:	f7fe fd12 	bl	80007c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001da0:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_TIM6_Init+0x70>)
 8001da2:	f7ff fb1b 	bl	80013dc <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_UPDATE);
 8001da6:	2120      	movs	r1, #32
 8001da8:	4804      	ldr	r0, [pc, #16]	; (8001dbc <MX_TIM6_Init+0x70>)
 8001daa:	f7ff fb27 	bl	80013fc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001dae:	4803      	ldr	r0, [pc, #12]	; (8001dbc <MX_TIM6_Init+0x70>)
 8001db0:	f7ff fb37 	bl	8001422 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8001dc4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001dc8:	f7ff fa7a 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001dcc:	f7fe fe16 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fe66 	bl	8000aa8 <NVIC_EncodePriority>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4619      	mov	r1, r3
 8001de0:	2038      	movs	r0, #56	; 0x38
 8001de2:	f7fe fe37 	bl	8000a54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001de6:	2038      	movs	r0, #56	; 0x38
 8001de8:	f7fe fe16 	bl	8000a18 <__NVIC_EnableIRQ>

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	463b      	mov	r3, r7
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
 8001e04:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001e06:	2080      	movs	r0, #128	; 0x80
 8001e08:	f7ff fa5a 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff fa57 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8001e12:	2010      	movs	r0, #16
 8001e14:	f7ff fa54 	bl	80012c0 <LL_AHB1_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001e18:	2310      	movs	r3, #16
 8001e1a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	463b      	mov	r3, r7
 8001e26:	4619      	mov	r1, r3
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <MX_GPIO_Init+0x60>)
 8001e2a:	f7fe fc1e 	bl	800066a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10
 8001e2e:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8001e32:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_GPIO_Init+0x64>)
 8001e42:	f7fe fc12 	bl	800066a <LL_GPIO_Init>

}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40020000 	.word	0x40020000
 8001e54:	40021000 	.word	0x40021000

08001e58 <LL_DMA_IsActiveFlag_TC0>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF0)==(DMA_LISR_TCIF0));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <LL_DMA_ClearFlag_TC0>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f06f 0201 	mvn.w	r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <NMI_Handler+0x4>

08001ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <HardFault_Handler+0x4>

08001ee6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <MemManage_Handler+0x4>

08001eec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <BusFault_Handler+0x4>

08001ef2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <UsageFault_Handler+0x4>

08001ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM6) == 1)
 8001f34:	4806      	ldr	r0, [pc, #24]	; (8001f50 <TIM6_DAC_IRQHandler+0x20>)
 8001f36:	f7ff ffbd 	bl	8001eb4 <LL_TIM_IsActiveFlag_UPDATE>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d104      	bne.n	8001f4a <TIM6_DAC_IRQHandler+0x1a>
	{
		Timer_Interrupt();
 8001f40:	f7ff fb86 	bl	8001650 <Timer_Interrupt>
		LL_TIM_ClearFlag_UPDATE(TIM6);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <TIM6_DAC_IRQHandler+0x20>)
 8001f46:	f7ff ffa7 	bl	8001e98 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40001000 	.word	0x40001000

08001f54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	  ADC_DMA_TransferComplete_Callback();
 8001f58:	f7ff fb1a 	bl	8001590 <ADC_DMA_TransferComplete_Callback>
	  if(LL_DMA_IsActiveFlag_TC0(DMA2) == 1)
 8001f5c:	4805      	ldr	r0, [pc, #20]	; (8001f74 <DMA2_Stream0_IRQHandler+0x20>)
 8001f5e:	f7ff ff7b 	bl	8001e58 <LL_DMA_IsActiveFlag_TC0>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d102      	bne.n	8001f6e <DMA2_Stream0_IRQHandler+0x1a>
	  {
		LL_DMA_ClearFlag_TC0(DMA2);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA2_Stream0_IRQHandler+0x20>)
 8001f6a:	f7ff ff88 	bl	8001e7e <LL_DMA_ClearFlag_TC0>
  /* USER CODE END DMA2_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40026400 	.word	0x40026400

08001f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb8:	4c0b      	ldr	r4, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fc6:	f7ff ffd7 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f000 f811 	bl	8001ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7ff fa5d 	bl	800148c <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001fe0:	0800209c 	.word	0x0800209c
  ldr r2, =_sbss
 8001fe4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001fe8:	20000038 	.word	0x20000038

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <__libc_init_array>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	4d0d      	ldr	r5, [pc, #52]	; (8002028 <__libc_init_array+0x38>)
 8001ff4:	4c0d      	ldr	r4, [pc, #52]	; (800202c <__libc_init_array+0x3c>)
 8001ff6:	1b64      	subs	r4, r4, r5
 8001ff8:	10a4      	asrs	r4, r4, #2
 8001ffa:	2600      	movs	r6, #0
 8001ffc:	42a6      	cmp	r6, r4
 8001ffe:	d109      	bne.n	8002014 <__libc_init_array+0x24>
 8002000:	4d0b      	ldr	r5, [pc, #44]	; (8002030 <__libc_init_array+0x40>)
 8002002:	4c0c      	ldr	r4, [pc, #48]	; (8002034 <__libc_init_array+0x44>)
 8002004:	f000 f818 	bl	8002038 <_init>
 8002008:	1b64      	subs	r4, r4, r5
 800200a:	10a4      	asrs	r4, r4, #2
 800200c:	2600      	movs	r6, #0
 800200e:	42a6      	cmp	r6, r4
 8002010:	d105      	bne.n	800201e <__libc_init_array+0x2e>
 8002012:	bd70      	pop	{r4, r5, r6, pc}
 8002014:	f855 3b04 	ldr.w	r3, [r5], #4
 8002018:	4798      	blx	r3
 800201a:	3601      	adds	r6, #1
 800201c:	e7ee      	b.n	8001ffc <__libc_init_array+0xc>
 800201e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002022:	4798      	blx	r3
 8002024:	3601      	adds	r6, #1
 8002026:	e7f2      	b.n	800200e <__libc_init_array+0x1e>
 8002028:	08002094 	.word	0x08002094
 800202c:	08002094 	.word	0x08002094
 8002030:	08002094 	.word	0x08002094
 8002034:	08002098 	.word	0x08002098

08002038 <_init>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	bf00      	nop
 800203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203e:	bc08      	pop	{r3}
 8002040:	469e      	mov	lr, r3
 8002042:	4770      	bx	lr

08002044 <_fini>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	bf00      	nop
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr
